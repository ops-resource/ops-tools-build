<?xml version="1.0" encoding="utf-8"?>
<Project
    DefaultTargets="Run"
    ToolsVersion="11.0"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <!--
        **** DEPLOY STEPS ****
    -->
    <!--
         A list of all additional scripts and their targets that should be executed before each of the selected deploy steps. Globally defined
         pre-steps will be executed prior to the presteps of the individual steps.

        The metadata to the script that is about to be executed is passed to each pre-step under the following properties:

        - StepDescription : The full description of the step to be executed.
        - StepId          : The ID of the step. In general the name of the property that references the step file.
        - StepName        : The name of the step.
        - StepPath        : The full path to the script file for the step.

        Additionally all the standard properties as seen below and the properties for the given deploy step are passed in.
    -->
    <ItemGroup>
        <!--
        <DeployPreStepsToExecute Include="">
            <Properties>
            </Properties>
        </DeployPreStepsToExecute>
        -->
    </ItemGroup>

    <!--
        A list of all additional scripts and their targets that should be executed after each of the selected deploy steps. Globally defined
         post-steps will be executed after the poststeps of the individual steps.

        The metadata to the script that is about to be executed is passed to each pre-step under the following properties:

        - StepDescription : The full description of the step to be executed.
        - StepId          : The ID of the step. In general the name of the property that references the step file.
        - StepName        : The name of the step.
        - StepPath        : The full path to the script file for the step.

        Additionally all the standard properties as seen below and the properties for the given deploy step are passed in.
    -->
    <ItemGroup>
        <!--
        <DeployPostStepsToExecute Include="">
            <Properties>
            </Properties>
        </DeployPostStepsToExecute>
        -->
    </ItemGroup>
    <!--
        If no deploy steps are defined by the ops.deploy.props file then we display the help file.
    -->
    <ItemGroup Condition=" '@(DeployStepsToExecute)' == '' ">
        <DeployStepsToExecute Include="$(DeployStepsShowHelp)">
            <Properties>
                HelpFilePathSharedSettings=$(DirNBuildKitMsBuildShared)\shared.importdeploysharedsettings.props;
                HelpFileSettings=deploy.settings.props;
                HelpProcess=deploy;
                HelpStepGroup=DeployStepsToExecute;
            </Properties>
            <Groups>
                Help;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </DeployStepsToExecute>
    </ItemGroup>

    <!--
        Define the scripts that should be executed when any one of the deploy steps fails.

        Steps can be defined by providing the path to the MsBuild script that should be executed
        for that step, e.g. adding a deploy step that points to the 'c:\stuff\MyCoolScript.msbuild' will execute
        that script.

        Each script has the following properties passed to it:
        $(ShouldDisplayDebugLog)         - A flag indicating whether or not to display debug log information, usually at the start of the script execution.
        $(NBuildKitVersion)              - The full version of the nBuildKit library that is executing the build.
        $(DirNBuildKitMsBuild)           - The full path to the directory that contains the nBuildKit scripts.
        $(DirNBuildKitMsBuildShared)     - The full path to the directory that contains the shared nBuildkit scripts.
        $(DirNBuildKitMsBuildExtensions) - The full path to the directory that contains the nBuildKit extension scripts.
        $(DirNBuildKitMsBuildTemplates)  - The full path to the directory that contains the nBuildKit templates.

        Additionally any properties defined by the 'Properties' section are also pushed up.
    -->
    <ItemGroup Condition=" '@(DeployFailureStepsToExecute)' == '' ">
        <!--
        <DeployFailureStepsToExecute Include="">
            <Properties>
            </Properties>
        </DeployFailureStepsToExecute>
        -->
    </ItemGroup>

    <!--
        The following item group stores metadata describing the custom deploy steps that are executed in the deploy process.
        By providing this metadata it is possible for pre- and post-step actions to more clearly determine which step
        they were attached to.
    -->
    <ItemGroup>
        <!--
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(DirWorkspace)\my.deploy.step.msbuild'))">
            <Description>
                The description for my cool deploy step
            </Description>
            <Id></Id>
            <Name>My deploy step</Name>
            <Path>$(DirWorkspace)\my.deploy.step.msbuild</Path>
        </AvailableStepMetadata>
        -->
    </ItemGroup>


    <!--
        **** PUSHTO - DIRECTORY / FILESERVER ****
    -->
    <!--
        The ItemGroup defining the files that should be pushed to a given deployment directory.

        The IncludedFiles and the ExcludedFiles are lists of files that
        should be included (or excluded) in the list of files to deploy. Each entry is separated by a semi-colon(;).

        The PushToDirectorySpecs, IncludedFiles and ExcludedFiles all allow the insertion of build templates,
        e.g. \\MyServer\${ProductNameInFilePath}\${VersionSemantic}
    -->
    <ItemGroup Condition=" '@(PushToDirectorySpecs)' == '' ">
        <!--<PushToDirectorySpecs Include="\\MyServer\${ProductNameInFilePath}\${VersionSemantic}">
            <IncludedFiles>
                $(DirBuildDeploy)\myfile.zip
            </IncludedFiles>
            <ExcludedFiles>
            </ExcludedFiles>
        </PushToDirectorySpecs>-->
    </ItemGroup>


    <!--
        **** PUSHTO - NUGET ****
    -->
    <!--
        The ItemGroup defining which packages should be pushed up to the NuGet package source.
        Allows build templates, e.g. $(DirBuildDeploy)\${VersionSemantic}\*.nupkg.
    -->
    <ItemGroup Condition=" '@(NuGetPackagesToPush)' == '' ">
        <!--<NuGetPackagesToPush Include="$(DirBuildDeploy)\*.nupkg"
                             Exclude="$(DirBuildDeploy)\*.symbols.nupkg" />-->
    </ItemGroup>


    <!--
        **** PUSHTO - SYMBOL SERVER ****
    -->
    <!--
        The ItemGroup defining which symbol packages should be pushed up to the symbol server.
        Allows build templates, e.g. $(DirBuildDeploy)\${VersionSemantic}\*.symbols.nupkg.
    -->
    <ItemGroup Condition=" '@(SymbolPackagesToPush)' == '' ">
        <!--<SymbolPackagesToPush Include="$(DirBuildDeploy)\*.symbols.nupkg" />-->
    </ItemGroup>


    <!--
        **** PUSHTO - GITHUB RELEASE ****
    -->
    <!--
        The ItemGroup defining the files that should be pushed to a GitHub release. All properties
        except for the Repository allow the use of build templates, e.g. $(DirBuildDeploy)\myarchive-${VersionSemantic}.zip
    -->
    <ItemGroup Condition=" '@(PushToGitHubReleaseSpecs)' == '' ">
        <!--
        <PushToGitHubReleaseSpecs Include="${VersionSemantic} - My release">
             <Repository>MyCoolProject</Repository>
             <Description>${ReleaseNotes}</Description>
             <IncludedFiles>
                $(DirBuildDeploy)\myarchive-${VersionSemantic}.zip
             </IncludedFiles>
             <ExcludedFiles>
             </ExcludedFiles>
        </PushToGitHubReleaseSpecs>
        -->
    </ItemGroup>


    <!--
        **** PUSHTO - GIT BRANCH ****
    -->
    <!--
        The ItemGroup defining the files that should be pushed to a GIT branch. All properties
        allow the use of build templates, e.g. $(DirBuildDeploy)\myarchive-${VersionSemantic}.zip
    -->
    <ItemGroup Condition=" '@(PushToGitBranchSpecs)' == '' ">
        <!--
        <PushToGitBranchSpecs Include="$(DirBuildDeploy)\myarchive-${VersionSemantic}.zip">
             <Repository>$(GitRemoteRepository)</Repository>
             <Branch>master</Branch>
             <ExtractZipFiles>true</ExtractZipFiles>
             <CommitMessage>New changes</CommitMessage>
        </PushToGitBranchSpecs>
        -->
    </ItemGroup>


    <!--
        **** PUSHTO - GIT REPOSITORY ****
    -->
    <!--
        The ItemGroup defining the zip files containing a git workspace that should be pushed to a GIT repository.
        All properties allow the use of build templates, e.g. $(DirBuildDeploy)\myarchive-${VersionSemantic}.zip
    -->
    <ItemGroup Condition=" '@(PushToGitRepositorySpecs)' == '' ">
        <!--
        <PushToGitRepositorySpecs Include="$(DirBuildDeploy)\myarchive-${VersionSemantic}.zip">
             <Repository>$(GitRemoteRepository)</Repository>
        </PushToGitRepositorySpecs>
        -->
    </ItemGroup>
</Project>
