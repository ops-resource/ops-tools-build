<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="11.0"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <Import Project="$(MSBuildThisFileDirectory)transform.version.props" />

    <PropertyGroup>
        <!--
            The highest version of the configuration scripts that is expected.
        -->
        <VersionOpsToolsExpected>$(VersionTransformLatestMajor).$(VersionTransformLatestMinor)</VersionOpsToolsExpected>

        <!--
            For MsBuild versions 4.0 through to 12.0 the tasks dll was in an assembly that contains the version in the file name.
            However starting with version 14 that is no longer the case so have to differentiate between these cases.
        -->
        <MsBuildTasksAssembly>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</MsBuildTasksAssembly>
        <MsBuildTasksAssembly Condition="!Exists('$(MsBuildTasksAssembly)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</MsBuildTasksAssembly>
    </PropertyGroup>

    <!--
        Define the expected locations of the settings files so that we can copy / transform them later on.
    -->
    <ItemGroup>
        <SettingsFilesToBeTransformed Include="$(DirLocalUserSettings)\ops.*.props" />
        <SettingsFilesToBeTransformed Include="$(DirLocalUserSettings)\ops.props" />
    </ItemGroup>

    <!--
        The target can assume that the following properties exist

            $(DirWorkspace)         - The workspace directory is defined as the directory that is the top-level
                                      directory in which all the files for the build, test, deploy stage can be found.
                                      During the process there should never be a need to go any futher up the directory
                                      hierarchy to find files.
            $(DirLocalUserSettings) - The directory in which the configuration files, like settings.props, are located.
            $(DirUserConfiguration) - The directory into which the configuration files, like settings.props, should
                                      be copied.

        The target is expected to create the following files:

            $(DirUserConfiguration)\settings.props
            $(DirUserConfiguration)\artefacts.settings.props
            $(DirUserConfiguration)\build.settings.props
            $(DirUserConfiguration)\deploy.settings.props
            $(DirUserConfiguration)\test.settings.props

        The created files should be valid settings files for the version of nBuildKit that is being executed.

        If the script does not create the settings files then nBuildKit will attempt to copy the files from
        the '$(DirLocalUserSettings)' location to the '$(DirUserConfiguration)' directory.
    -->
    <Target
        Name="_Custom_TransformConfigurations"
        Outputs="%(SettingsFilesToBeTransformed.FullPath)">

        <PropertyGroup>
            <FilePathToTransform>%(SettingsFilesToBeTransformed.FullPath)</FilePathToTransform>
            <FileNameToTransform>%(SettingsFilesToBeTransformed.FileName)</FileNameToTransform>
            <FileNameConfigurationOutput>$(FileNameToTransform)</FileNameConfigurationOutput>
            <FileTempUserConfiguration>$(DirUserConfiguration)\temp\ops\$(FileNameConfigurationOutput).props</FileTempUserConfiguration>
            <FileUserConfiguration>$(DirUserConfiguration)\$(FileNameConfigurationOutput).props</FileUserConfiguration>
        </PropertyGroup>

        <XmlPeek
            Condition="Exists('$(FileUserConfiguration)')"
            Namespaces="&lt;Namespace Prefix='x' Uri='http://schemas.microsoft.com/developer/msbuild/2003' /&gt;"
            Query="/x:Project/x:PropertyGroup/x:OpsVersion/text()"
            XmlInputPath="$(FileUserConfiguration)">
            <Output
                ItemName="VersionExistingConfigurationFile"
                TaskParameter="Result" />
        </XmlPeek>
        <PropertyGroup>
            <IsUpToDate Condition=" '$(VersionExistingConfigurationFile)' == '$(VersionOpsToolsExpected)' ">true</IsUpToDate>
            <IsUpToDate Condition=" '$(IsUpToDate)' == '' ">false</IsUpToDate>
        </PropertyGroup>

        <XmlPeek
            Condition=" '$(IsUpToDate)' == 'false' "
            Namespaces="&lt;Namespace Prefix='x' Uri='http://schemas.microsoft.com/developer/msbuild/2003' /&gt;"
            Query="/x:Project/x:PropertyGroup/x:OpsVersion/text()"
            XmlInputPath="$(FilePathToTransform)" >
            <Output
                ItemName="VersionConfigurationFile"
                TaskParameter="Result" />
        </XmlPeek>

        <ToolsOps_TransformConfiguration_FindXsltFiles
            Condition=" '$(IsUpToDate)' == 'false' "
            Directory="$(MSBuildThisFileDirectory)"
            FileName="$(FileNameConfigurationOutput).xsl"
            Version="@(VersionConfigurationFile)" >
            <Output
                ItemName="TransformationsToApply"
                TaskParameter="Result" />
        </ToolsOps_TransformConfiguration_FindXsltFiles>

        <CreateProperty Value="$([System.IO.Path]::GetDirectoryName('$(FileTempUserConfiguration)'))">
            <Output
                PropertyName="DirToCreate"
                TaskParameter="Value" />
        </CreateProperty>
        <MakeDir
            Condition="!Exists('$(DirToCreate)') AND '$(IsUpToDate)' == 'false' "
            Directories="$(DirToCreate)" />
        <XslTransformation
            Condition=" '$(IsUpToDate)' == 'false' AND @(TransformationsToApply) != '' "
            OutputPaths="$(FileTempUserConfiguration)"
            UseTrustedSettings="true"
            XmlInputPaths="$(FilePathToTransform)"
            XslInputPath="%(TransformationsToApply.FullPath)" />

        <!--
            Copy the transformed file if it exists, otherwise copy the original
        -->
        <Copy
            Condition=" '$(IsUpToDate)' == 'false' AND Exists('$(FileTempUserConfiguration)') "
            DestinationFiles="$(FileUserConfiguration)"
            SourceFiles="$(FileTempUserConfiguration)" />
        <Copy
            Condition=" '$(IsUpToDate)' == 'false' AND !Exists('$(FileTempUserConfiguration)') "
            DestinationFiles="$(FileUserConfiguration)"
            SourceFiles="$(FilePathToTransform)" />
    </Target>

    <UsingTask
        AssemblyFile="$(MsBuildTasksAssembly)"
        TaskFactory="CodeTaskFactory"
        TaskName="ToolsOps_TransformConfiguration_FindXsltFiles" >
        <ParameterGroup>
            <Directory ParameterType="System.String" Required="true" />
            <FileName ParameterType="System.String" Required="true" />
            <Version ParameterType="System.String" Required="true" />
            <Result
                ParameterType="Microsoft.Build.Framework.ITaskItem[]"
                Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System.Linq" />
            <Code
                Language="cs"
                Type="Method">
                <![CDATA[
                    public override bool Execute()
                    {
                        var minimumPath = System.IO.Path.Combine(Directory, Version);
                        Result = System.IO.Directory.EnumerateFiles(Directory, FileName, SearchOption.AllDirectories)
                            .Where(
                                p => string.Compare(
                                    System.IO.Path.GetDirectoryName(p),
                                    minimumPath,
                                    System.StringComparison.OrdinalIgnoreCase) > 0)
                            .OrderBy(p => System.IO.Path.GetDirectoryName(p))
                            .Select(p => new TaskItem(p))
                            .ToArray();

                        // Log.HasLoggedErrors is true if the task logged any errors -- even if they were logged
                        // from a task's constructor or property setter. As long as this task is written to always log an error
                        // when it fails, we can reliably return HasLoggedErrors.
                        return !Log.HasLoggedErrors;
                    }
                ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>
