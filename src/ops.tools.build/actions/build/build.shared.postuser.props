<?xml version="1.0" encoding="utf-8"?>
<Project
    DefaultTargets="Run"
    ToolsVersion="11.0"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <!--
        **** BUILD STEPS ****
    -->
    <!--
         A list of all additional scripts and their targets that should be executed before each of the selected build steps. Globally defined
         pre-steps will be executed prior to the presteps of the individual steps.

        The metadata to the script that is about to be executed is passed to each pre-step under the following properties:

        - StepDescription : The full description of the step to be executed.
        - StepId          : The ID of the step. In general the name of the property that references the step file.
        - StepName        : The name of the step.
        - StepPath        : The full path to the script file for the step.

        Additionally all the standard properties as seen below and the properties for the given build step are passed in.
    -->
    <ItemGroup>
        <!--
        <BuildPreStepsToExecute Include="">
            <Properties>
            </Properties>
        </BuildPreStepsToExecute>
        -->
    </ItemGroup>

    <!--
        A list of all additional scripts and their targets that should be executed after each of the selected build steps. Globally defined
         post-steps will be executed after the poststeps of the individual steps.

        The metadata to the script that is about to be executed is passed to each pre-step under the following properties:

        - StepDescription : The full description of the step to be executed.
        - StepId          : The ID of the step. In general the name of the property that references the step file.
        - StepName        : The name of the step.
        - StepPath        : The full path to the script file for the step.

        Additionally all the standard properties as seen below and the properties for the given build step are passed in.
    -->
    <ItemGroup>
        <!--
        <BuildPostStepsToExecute Include="">
            <Properties>
            </Properties>
        </BuildPostStepsToExecute>
        -->
    </ItemGroup>

    <!--
        If no build steps are defined by the ops.build.props file then we display the help file.
    -->
    <ItemGroup Condition=" '@(BuildStepsToExecute)' == '' ">
        <BuildStepsToExecute Include="$(BuildStepsShowHelp)">
            <Properties>
                HelpFilePathSharedSettings=$(DirNBuildKitMsBuildShared)\shared.importbuildsharedsettings.props;
                HelpFileSettings=build.settings.props;
                HelpProcess=build;
                HelpStepGroup=BuildStepsToExecute;
            </Properties>
            <Groups>
                Help;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </BuildStepsToExecute>
    </ItemGroup>

    <!--
        Define the scripts that should be executed when any one of the build steps fails.

        Steps can be defined by providing the path to the MsBuild script that should be executed
        for that step, e.g. adding a build step that points to the 'c:\stuff\MyCoolScript.msbuild' will execute
        that script.

        Each script has the following properties passed to it:
        $(ShouldDisplayDebugLog)         - A flag indicating whether or not to display debug log information, usually at the start of the script execution.
        $(NBuildKitVersion)              - The full version of the nBuildKit library that is executing the build.
        $(DirNBuildKitMsBuild)           - The full path to the directory that contains the nBuildKit scripts.
        $(DirNBuildKitMsBuildShared)     - The full path to the directory that contains the shared nBuildkit scripts.
        $(DirNBuildKitMsBuildExtensions) - The full path to the directory that contains the nBuildKit extension scripts.
        $(DirNBuildKitMsBuildTemplates)  - The full path to the directory that contains the nBuildKit templates.

        Additionally any properties defined by the 'Properties' section are also pushed up.
    -->
    <ItemGroup Condition=" '@(BuildFailureStepsToExecute)' == '' ">
        <!--
        <BuildFailureStepsToExecute Include="">
            <Properties>
            </Properties>
            <Groups>
            </Groups>
        </BuildFailureStepsToExecute>
        -->
    </ItemGroup>

    <!--
        The following item group stores metadata describing the custom build steps that are executed in the build process.
        By providing this metadata it is possible for pre- and post-step actions to more clearly determine which step
        they were attached to.
    -->
    <ItemGroup>
        <!--
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(DirWorkspace)\my.build.step.msbuild'))">
            <Description>
                The description for my cool build step
            </Description>
            <Id></Id>
            <Name>My build step</Name>
            <Path>$(DirWorkspace)\my.build.step.msbuild</Path>
        </AvailableStepMetadata>
        -->
    </ItemGroup>


    <!--
        **** PREPARE - WORKSPACE ****
    -->
    <!--
        The list of all files that should be deleted prior to starting the build process.

        If the deletion process fails the build will continue and a warning will be printed.
    -->
    <ItemGroup Condition=" '@(BuildFilesToDelete)' == '' ">
        <!--
        <BuildFilesToDelete Include="" />
        -->
    </ItemGroup>

    <!--
        The list of all directories that should be deleted prior to starting the build process.
        Deleting the directories will also delete all the files contained in these directories.

        If the deletion process fails the build will continue and a warning will be printed.
    -->
    <ItemGroup Condition=" '@(BuildDirectoriesToDelete)' == '' ">
        <!--
        <BuildDirectoriesToDelete Include="" />
        -->
    </ItemGroup>


    <!--
        **** PREPARE - UPDATE ASSEMBLY INFO FILES ****
    -->
    <!--
        The list of all assembly info files that should be updated with version and copyright information.

        For additional information see the ShouldGenerateAssemblyXXXX properties below.
    -->
    <ItemGroup Condition=" '@(AssemblyInfoFilesToUpdate)' == '' ">
        <!--
        <AssemblyInfoFilesToUpdate Include="$(DirSrc)\**\AssemblyInfo.cs" />
        <AssemblyInfoFilesToUpdate Include="$(DirSrc)\**\AssemblyInfo.vb" />
        -->
    </ItemGroup>


    <!--
        **** PREPARE - GENERATE FILES ****
    -->
    <!--
        The list of all files that should be generated and their template files.

        The template file may contain zero or more template parameters as indicated at the top of this
        file. By default template parameters must be enclosed in '${}'. By providing a value for
        'Expression' it is possible to use a custom regular expression to search for elements to replace,
        e.g. $TOKEN$. Note that elements in the regular expession might need to be converted in a suitable
        format because XML doesn't like < and > and MsBuild doesn't like $ (%24), * (%2A), ? (%3F).

        Only the 'Template' value is required.

        Additional parameters can be provided through the 'TemplateTokens' ItemGroup below.
    -->
    <ItemGroup Condition=" '@(BuildFilesToGenerate)' == '' ">
        <!--
        <BuildFilesToGenerate Include="$(DirBuildTemp)\MyFile.txt">
            <Encoding>UTF-8</Encoding>
            <Expression>(MyRegex)</Expression>
            <ReplacementValue>MyAdditionalTemplateValue</ReplacementValue>
            <Template>$(DirTemplates)\MyOtherTemplatefile.txt</Template>
            <Token>MyAdditionalTemplateParameter</Token>
        </BuildFilesToGenerate>
        -->
    </ItemGroup>


    <!--
        **** VISUAL STUDIO BUILD ****
    -->
    <!--
        The item group defining the location of the Vistual Studio solutions that should be build.
        The solution path allows build templates, e.g. '$(DirSrc)\${CompanyName}\${ProductName}\MySolution.sln'
    -->
    <ItemGroup Condition=" '@(SolutionsToBuild)' == '' ">
        <!--
        <SolutionsToBuild Include="$(DirSrc)\*.sln"
                          Condition=" '$(TestConfiguration)' != '$(ProductionConfiguration)' " >
            <Configuration>$(TestConfiguration)</Configuration>
            <Platform>$(Platform)</Platform>
            <Targets>Rebuild</Targets>
            <Properties>
                ShouldPerformCodeAnalysis=false;
            </Properties>
            <GeneratedAssembliesFile>$(DirBuildTemp)\mysln.$(TestConfiguration).$(PlatformWithoutSpaces).props</GeneratedAssembliesFile>
        </SolutionsToBuild>
        <SolutionsToBuild Include="$(DirSrc)\*.sln">
            <Configuration>$(ProductionConfiguration)</Configuration>
            <Platform>$(Platform)</Platform>
            <Targets>Rebuild</Targets>
            <Properties>
                ShouldPerformCodeAnalysis=false;
            </Properties>
            <GeneratedAssembliesFile>$(DirBuildTemp)\mysln.$(ProductionConfiguration).$(PlatformWithoutSpaces).props</GeneratedAssembliesFile>
        </SolutionsToBuild>
        -->
    </ItemGroup>
    <ItemGroup Condition=" '@(InternalsVisibleTo)' == '' ">
        <!--
        <InternalsVisibleTo Include="MyTestProject">
            <Projects>
                MyProject1;
                MyProject2;
            </Projects>
            <KeyFile>$(MyKeyFileReference)</KeyFile>
        </InternalsVisibleTo>
        <InternalsVisibleTo Include="SomeExternalAssembly">
            <Projects>
                MyProject1;
                MyProject2;
            </Projects>
            <AssemblyFromPackage>SomeExternalAssembly.dll</AssemblyFromPackage>
        </InternalsVisibleTo>
        <InternalsVisibleTo Include="SomeOtherExternalAssemblyThatDoesNotExistOnDisk">
            <Projects>
                MyProject1;
                MyProject2;
            </Projects>
            <PublicKey>$(TheFullPublicKeyForTheExternalAssemblyThatDoesNotExistOnDisk)</PublicKey>
        </InternalsVisibleTo>
        -->
    </ItemGroup>


    <!--
        **** UNIT TESTS ****
    -->
    <ItemGroup Condition=" '@(UnitTestAssemblies)' == '' ">
        <!--
            The ItemGroup items that define which files contain the unit test cases. Paths can include build templates,
            e.g. $(DirBuildBinPlatformConfig)\${VersionMajor}.0\**\test*.dll
        -->
        <UnitTestAssemblies Include="$(DirSrc)\**\bin\$(Configuration)\**\*.$(UnitTestAssemblyNamePostfix).dll" />
    </ItemGroup>
    <ItemGroup Condition=" '@(OpenCoverIgnoreAttributes)' == '' ">
        <!--
            The ItemGroup items that define the attributes that indicate code that should be ignored by OpenCover.
        -->
        <!--<OpenCoverIgnoreAttributes Include="System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute" />-->
        <!--<OpenCoverIgnoreAttributes Include="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />-->
    </ItemGroup>
    <ItemGroup Condition=" '@(OpenCoverFilters)' == '' ">
        <!--
            The ItemGroup items that define the filters used by OpenCover.
            NOTE: Use the hexadecimal value for * (%2A) to avoid MsBuild trying to make sense out of the text.
        -->
        <!--<OpenCoverFilters Include="+[$(ProductNamespace)]%2A" />-->
        <!--<OpenCoverFilters Include="+[$(ProductNamespace).%2A]%2A" />-->
        <!--<OpenCoverFilters Include="-[%2A$(UnitTestAssemblyNamePostfix)%2A]%2A" />-->
        <!--<OpenCoverFilters Include="-[NUnit]%2A" />-->
        <!--<OpenCoverFilters Include="-[NUnit.%2A]%2A" />-->
    </ItemGroup>


    <!--
        **** SOURCE ANALYSIS - XML ****
    -->
    <ItemGroup Condition=" '@(XmlFilesToValidate)' == '' ">
        <!--
            The paths to the XML files that should be validated against the given schema.
        -->
        <!--
        <XmlFilesToValidate
            Include="$(DirSrc)\**\*.xml"
            Exclude="$(DirSrc)\**\ignore.xml">
            <SchemaFile></SchemaFile>
            <TargetNamespace></TargetNamespace>
        </XmlFilesToValidate>
        -->
    </ItemGroup>


    <!--
        **** BINARY ANALYSIS - FXCOP ****
    -->
    <ItemGroup Condition=" '@(FxCopFiles)' == '' ">
        <!--
            The locations of the files that should be analyzed by FxCop.
        -->
        <!--
        <FxCopFiles Include="$(DirSrc)\**\bin\$(Configuration)\*.dll"
                    Exclude="$(DirSrc)\**\bin\$(Configuration)\Test.*.dll">
            <TargetFramework>4.5</TargetFramework>
            <RuleSet>$(DirSrc)\codeanalysis.base.ruleset</RuleSet>
        </FxCopFiles>
        <FxCopFiles Include="$(DirSrc)\**\bin\$(Configuration)\*.exe">
            <TargetFramework>2.0</TargetFramework>
            <RuleSet>$(DirSrc)\codeanalysis.base.ruleset</RuleSet>
        </FxCopFiles>
        -->
    </ItemGroup>
    <ItemGroup Condition=" '@(FxCopReferenceFiles)' == '' ">
        <!--
            The locations of the assemblies (not including the .NET framework assemblies) which FxCop should
            use as reference assemblies.
        -->
        <!--
        <FxCopReferenceFiles Include=""
                             Exclude="" />
        -->
    </ItemGroup>
    <ItemGroup Condition=" '@(FxCopReferenceDirectories)' == '' ">
        <!--
            The directory locations that contain the assemblies (not including the .NET framework assemblies) which
            FxCop should use as reference assemblies
        -->
        <!--
        <FxCopReferenceDirectories Include=""
                                   Exclude="" />
        -->
    </ItemGroup>


    <!--
        **** PACK - NUGET ****
    -->
    <!--
        The item group defining the (partial) names of the NuGet packages that only contain design time element and should
        thus not be considered dependencies for the generated NuGet packages, even if they are included in the list
        of dependencies that should be included.

        By default nBuildkit and nUnit are ignored.
    -->
    <ItemGroup Condition=" '@(DesignTimeDependencies)' == '' ">
        <!--<DesignTimeDependencies Include="nBuildKit" />-->
        <!--<DesignTimeDependencies Include="nUnit" />-->
    </ItemGroup>






    <!--
        *****************************************
        *                                       *
        *   OPS.TOOLS.BUILD SPECIFIC SETTINGS   *
        *                                       *
        *****************************************
    -->

    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsOpsToolsBuildBuildPostUserSharedSettings>true</ExistsOpsToolsBuildBuildPostUserSharedSettings>
    </PropertyGroup>
</Project>
