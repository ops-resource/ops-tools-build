<?xml version="1.0" encoding="utf-8"?>
<Project
    ToolsVersion="14.0"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <ExistsOpsToolsBuildBuildSteps>true</ExistsOpsToolsBuildBuildSteps>
    </PropertyGroup>
    <PropertyGroup>
        <BuildStepsPrepareRestoreGems>$(MSBuildThisFileDirectory)..\shared.prepare.bundler.restore.msbuild</BuildStepsPrepareRestoreGems>
        <BuildStepsPrepareRestoreBerkshelf>$(MSBuildThisFileDirectory)..\shared.prepare.berkshelf.restore.msbuild</BuildStepsPrepareRestoreBerkshelf>

        <BuildStepsAnalyzeRuboCop>$(MSBuildThisFileDirectory)build.analyze.rubocop.msbuild</BuildStepsAnalyzeRuboCop>
        <BuildStepsAnalyzeFoodCritic>$(MSBuildThisFileDirectory)build.analyze.foodcritic.msbuild</BuildStepsAnalyzeFoodCritic>

        <BuildStepsUnitTestChefSpec>$(MSBuildThisFileDirectory)build.test.unit.chefspec.msbuild</BuildStepsUnitTestChefSpec>

        <BuildStepsPackIso>$(MSBuildThisFileDirectory)build.pack.iso.msbuild</BuildStepsPackIso>
        <BuildStepsPackPacker>$(MSBuildThisFileDirectory)build.pack.packer.msbuild</BuildStepsPackPacker>

        <BuildStepsPackDocker>$(MSBuildThisFileDirectory)build.pack.docker.msbuild</BuildStepsPackDocker>
    </PropertyGroup>
    <ItemGroup Condition=" '$(ShouldLoadAvailableStepMetadata)' == 'true' ">
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPrepareRestoreGems)'))">
            <Description>
                Restores the required Ruby Gems.
            </Description>
            <Id>BuildStepsPrepareRestoreGems</Id>
            <Name>Build - restore Ruby gems</Name>
            <Path>$(BuildStepsPrepareRestoreGems)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPrepareRestoreBerkshelf)'))">
            <Description>
                Restores the cookbook dependencies.
            </Description>
            <Id>BuildStepsPrepareRestoreBerkshelf</Id>
            <Name>Build - restore cookbook dependencies</Name>
            <Path>$(BuildStepsPrepareRestoreBerkshelf)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsAnalyzeRuboCop)'))">
            <Description>
                Analyze ruby code with the RuboCop tool.
            </Description>
            <Id>BuildStepsAnalyzeRuboCop</Id>
            <Name>Build - Analyze ruby code with Rubocop</Name>
            <Path>$(BuildStepsAnalyzeRuboCop)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsAnalyzeFoodCritic)'))">
            <Description>
                Analyze Chef cookbooks with the Foodcritic tool.
            </Description>
            <Id>BuildStepsAnalyzeFoodCritic</Id>
            <Name>Build - Analyze Chef code with foodcritic</Name>
            <Path>$(BuildStepsAnalyzeFoodCritic)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsUnitTestChefspec)'))">
            <Description>
                Execute tests on Chef cookbooks with ChefSpec.
            </Description>
            <Id>BuildStepsUnitTestChefspec</Id>
            <Name>Build - Test Chef code with ChefSpec</Name>
            <Path>$(BuildStepsUnitTestChefspec)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPackIso)'))">
            <Description>
                Create an ISO file from a given set of files and directories.
            </Description>
            <Id>BuildStepsPackIso</Id>
            <Name>Build - Create ISO file</Name>
            <Path>$(BuildStepsPackIso)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPackPacker)'))">
            <Description>
                Create an Packer file from a given set of Packer configuration files.
            </Description>
            <Id>BuildStepsPackPacker</Id>
            <Name>Build - Create Packer file</Name>
            <Path>$(BuildStepsPackPacker)</Path>
        </AvailableStepMetadata>
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(BuildStepsPackDocker)'))">
            <Description>
                Create an Docker container from a given set of Docker configuration files.
            </Description>
            <Id>BuildStepsPackDocker</Id>
            <Name>Build - Create Docker container</Name>
            <Path>$(BuildStepsPackDocker)</Path>
        </AvailableStepMetadata>
    </ItemGroup>
</Project>
