<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="11.0"
         DefaultTargets="Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <!--
        The following ItemGroup defines which steps are taken during the test process. The order of the items in the item group
        determines in which order the test steps are executed.

        Each test step can define the following items:
        - Properties                                     - The semi-colon separated set of properties that should be passed to the script.
                                                           Properties are written as 'key=value'.
        - Groups                                         - All the groups that a given step belongs to. The user can elect to only run test steps for a given group.
        - PreSteps                                       - A semi-colon separated list of all additional scripts and their targets that should be executed before
                                                           the selected test step.
        - PostSteps                                      - A semi-colon separated list of all additional scripts and their targets that should be executed after
                                                           the selected test step.

        The metadata to the script that is about to be executed is passed to each pre-step under the following properties:

        - StepDescription : The full description of the step to be executed.
        - StepId          : The ID of the step. In general the name of the property that references the step file.
        - StepName        : The name of the step.
        - StepPath        : The full path to the script file for the step.

        Additionally all the standard properties as seen below and the properties for the given test step are passed in.

        The following ItemGroup defines which steps are taken during the test process. The order of the items in the item group
        determines in which order the test steps are executed.

        The following test steps are by default provided through the given properties:
        $(TestStepsPrepareWorkspace)     - Clears the existing build artifacts from the workspace and creates the required directories. Clearing the
                                           existing build artifacts is only executed if the $(ShouldClean) property is set to 'true'.
        $(TestStepsBuildTargetsAssembly) - Builds Visual Studio projects that contain MsBuild Tasks. Separate from building the standard Visual Studio
                                           solutions so that it is possible to build MsBuild tasks that will be used in the build process.
        $(TestStepsGenerateTargetsFile)  - Generates a targets file for use with an MsBuild tasks assembly.
        $(TestStepsPrepareRestoreNuGet)  - Restores the NuGet packages as specified in the '$(DirWorkspace)\packages.config' file. Additionally
                                           also restores the NuGet packages as specified in the nBuildKit specific 'packages.config' files.
        $(TestStepsPrepareVcsBranch)     - When building from a GIT repository on Jenkins ensures that the current checkout has the same branch
                                           name as the remote tracking branch.
        $(TestStepsPrepareGetVersion)    - Gathers version information and stores it in a temporary file for use by the rest of the test process.
                                           Currently supported methods of gathering version information are using (in order):
                                           - The version defined by a custom MsBuild task which is defined in a file of which the path is stored
                                             in the 'ScriptGetVersion' property. The task should output:
                                             - VersionMajor
                                             - VersionMinor
                                             - VersionPatch
                                             - VersionBuild
                                             - VersionPreRelease
                                             - VersionSemantic
                                             - VersionSemanticFull
                                             - VersionSemanticNuget
                                           - The version stored in an 'version.xml' file which contains an MsBuild property group with
                                             the properties:
                                             - BuildNumber
                                             - VersionMajor
                                             - VersionMinor
                                             - VersionPatch
                                             - VersionBuild
                                             - VersionPreRelease
                                             - The GitVersion tool (https://github.com/ParticularLabs/GitVersion)
                                             - The GitHubFlowVersion tool (https://github.com/JakeGinnivan/GitHubFlowVersion)
        $(TestStepsPrepareGetIssueIds)   - Gets the issue IDs from the commits on the current branch and stores them in a temp file for later use.
        $(TestStepsPrepareReleaseNotes)  - Gathers the release notes and stores them for later use during the test process. Release notes
                                           are retrieved with the GitReleaseNotes tool (https://github.com/GitTools/GitReleaseNotes) which
                                           currently allows gathering release notes from GitHub, Jira and YouTrack
        $(TestStepsPrepareVcsInfo)       - Stores the Version Control System (VCS) information in a file for later use.
                                           Currently supported version control systems is GIT
        $(TestStepsPrepareGenerateFiles) - Generates one or more files from a set of template files.
        $(TestStepsIntegrationPester)    - Runs Pester on a specified test script file.

        Additional test steps can be defined by providing the path to the MsBuild script that should be executed
        for that step, e.g. adding a test step that points to the 'c:\stuff\MyCoolScript.msbuild' will execute
        that script.

        Each script has the following properties passed to it:
        $(ShouldDisplayDebugLog)          - A flag indicating whether or not to display debug log information, usually at the start of the script execution.
        $(NBuildKitVersion)               - The full version of the nBuildKit library that is executing the build.
        $(DirNBuildKitMsBuild)            - The full path to the directory that contains the nBuildKit scripts.
        $(DirNBuildKitMsBuildShared)      - The full path to the directory that contains the shared nBuildkit scripts.
        $(DirNBuildKitMsBuildExtensions)  - The full path to the directory that contains the nBuildKit extension scripts.
        $(DirNBuildKitMsBuildTemplates)   - The full path to the directory that contains the nBuildKit templates.
    -->
    <ItemGroup>
        <TestStepsToExecute Include="$(TestStepsPrepareWorkspace)">
            <Properties>
            </Properties>
            <Groups>
                Clean;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>

        <!--
        <TestStepsToExecute Include="$(TestStepsBuildTargetsAssembly)">
            <Properties>
            </Properties>
            <Groups>
                Bootstrap;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsGenerateTargetsFile)">
            <Properties>
            </Properties>
            <Groups>
                Bootstrap;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>
        -->

        <TestStepsToExecute Include="$(TestStepsPrepareRestoreNuGet)">
            <Properties>
                StageSpecificNuGetPackageFilesToRestore=$(DirNBuildKitMsBuild)\test\packages.config
            </Properties>
            <Groups>
                NuGet;
                Prepare;
                Restore;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>

        <!--
            The following steps need to be executed on the original branch (i.e. the branch we are interested in
            building.
        -->
        <TestStepsToExecute Include="$(TestStepsPrepareVcsBranch)">
            <Properties>
            </Properties>
            <Groups>
                Prepare;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsPrepareVcsInfo)">
            <Properties>
            </Properties>
            <Groups>
                Prepare;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsPrepareGetIssueIds)">
            <Properties>
            </Properties>
            <Groups>
                Prepare;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>

        <!--
            All steps from here on may be executed on a different branch than the orginal branch we we started the
            build on because we might have done some merging.
        -->
        <TestStepsToExecute Include="$(TestStepsPrepareGetVersion)">
            <Properties>
            </Properties>
            <Groups>
                Prepare;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsPrepareReleaseNotes)">
            <Properties>
            </Properties>
            <Groups>
                Prepare;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsPrepareGenerateFiles)">
            <Properties>
            </Properties>
            <Groups>
                Generate;
                Prepare;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>
        <TestStepsToExecute Include="$(TestStepsIntegrationPester)">
            <Properties>
            </Properties>
            <Groups>
                Integration;
                Pester;
            </Groups>
            <PreSteps>
            </PreSteps>
            <PostSteps>
            </PostSteps>
        </TestStepsToExecute>
    </ItemGroup>

    <!--
        Define the scripts that should be executed when any one of the test steps fails.

        Steps can be defined by providing the path to the MsBuild script that should be executed
        for that step, e.g. adding a test step that points to the 'c:\stuff\MyCoolScript.msbuild' will execute
        that script.

        Each script has the following properties passed to it:
        $(SharedPropertyFile)             - The full path to the settings.props file (i.e. this file).
        $(ShouldDisplayDebugLog)         - A flag indicating whether or not to display debug log information, usually at the start of the script execution.
        $(NBuildKitVersion)              - The full version of the nBuildKit library that is executing the build.
        $(DirNBuildKitMsBuild)           - The full path to the directory that contains the nBuildKit scripts.
        $(DirNBuildKitMsBuildShared)     - The full path to the directory that contains the shared nBuildkit scripts.
        $(DirNBuildKitMsBuildExtensions) - The full path to the directory that contains the nBuildKit extension scripts.
        $(DirNBuildKitMsBuildTemplates)  - The full path to the directory that contains the nBuildKit templates.

        Additionally any properties defined by the 'Properties' section are also pushed up.
    -->
    <ItemGroup>
        <!--
        <TestFailureStepsToExecute Include="">
            <Properties>
            </Properties>
        </TestFailureStepsToExecute>
        -->
    </ItemGroup>

    <!--
        The following item group stores metadata describing the custom test steps that are executed in the test process.
        By providing this metadata it is possible for pre- and post-step actions to more clearly determine which step
        they were attached to.
    -->
    <ItemGroup>
        <!--
        <AvailableStepMetadata Include="$([System.IO.Path]::GetFileName('$(DirWorkspace)\my.test.step.msbuild'))">
            <Description>
                The description for my cool test step
            </Description>
            <Id></Id>
            <Name>My test step</Name>
            <Path>$(DirWorkspace)\my.test.step.msbuild</Path>
        </AvailableStepMetadata>
        -->
    </ItemGroup>


    <!--
        **** PREPARE - WORKSPACE ****
    -->
        <!--
        The list of all files that should be deleted prior to starting the test process.

        If the deletion process fails the test will continue and a warning will be printed.
    -->
    <ItemGroup>
        <!--
        <TestFilesToDelete Include="" />
        -->
    </ItemGroup>

    <!--
        The list of all directories that should be deleted prior to starting the test process.
        Deleting the directories will also delete all the files contained in these directories.

        If the deletion process fails the test will continue and a warning will be printed.
    -->
    <ItemGroup>
        <!--
        <TestDirectoriesToDelete Include="" />
        -->
    </ItemGroup>

    <!--
        The list of all files that should be copied prior to starting the tests.
    -->
    <ItemGroup>
        <!--<TestFilesToCopy Include="$(DirTest)\**\*.*">
            <TargetDirectory>$(DirBuildTest)</TargetDirectory>
        </TestFilesToCopy>-->
    </ItemGroup>


    <!--
        **** PREPARE - GENERATE FILES ****
    -->
    <!--
        The list of all files that should be generated and their template files.

        The template file may contain zero or more template parameters as indicated at the top of this
        file. By default template parameters must be enclosed in '${}'. By providing a value for
        'Expression' it is possible to use a custom regular expression to search for elements to replace,
        e.g. $TOKEN$. Note that elements in the regular expession might need to be converted in a suitable
        format because XML doesn't like < and > and MsBuild doesn't like $ (%24), * (%2A), ? (%3F).

        Only the 'Template' value is required.

        Additional parameters can be provided through the 'TemplateTokens' ItemGroup below.
    -->
    <ItemGroup>
        <!--
        <TestFilesToGenerate Include="$(DirBuildTemp)\MyFile.txt">
            <<Encoding>UTF-8</Encoding>
            <Expression>(MyRegex)</Expression>
            <ReplacementValue>MyAdditionalTemplateValue</ReplacementValue>
            <Template>$(DirTemplates)\MyOtherTemplatefile.txt</Template>
            <Token>MyAdditionalTemplateParameter</Token>
        </TestFilesToGenerate>
        -->
    </ItemGroup>


    <!--
        **** INTEGRATION - PESTER ****
    -->
    <PropertyGroup>
        <!--
            The full path to the file into which Pester will write the test results.
        -->
        <!-- <FileTestReport>$(DirBuildLogs)\pester.integration.xml</FileTestReport> -->
    </PropertyGroup>
    <!--
        The list of all arguments that should be passed to the Pester test.
    -->
    <ItemGroup>
        <!--
        <PesterTestArguments Include="">
            <Value></Value>
        </PesterTestArguments>
        -->
    </ItemGroup>





    <!--
        *****************************************
        *                                       *
        *   TOOLS-OPS SPECIFIC SETTINGS    *
        *                                       *
        *****************************************
    -->

    <PropertyGroup>
        <OpsVersion>0.1</OpsVersion>
    </PropertyGroup>
</Project>
